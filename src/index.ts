import express, { Request, Response } from "express"

import { info, start, move, end, amUsingMachineData } from "./logic";

import { Collection, MongoClient } from "mongodb"
import { connectToDatabase, getCollection, snakeScoreAggregations } from "./db"
import { SnakeScoreMongoAggregate } from "./types"
import { Server } from "http";

import tokei from 'node-tokei'
import { TokeiResult } from "node-tokei"

const app = express()
app.use(express.json())

const port = process.env.PORT || 8080

export const evaluationsForMachineLearning: {[key: string]: number} = {} // a record of average snake scores gotten from database used to determine threshold for machine learnings
// key of evaluationsForMachineLearning is a hashKey generated by the unique info of a snakeScore pulled from DB aggregation
// key should be unique because DB aggregated things together based on matching fields - shouldn't be possible for there to be duplicates, or else they
// would have also been grouped together by the DB. Key should also contain all the context needed for the score

const locStats: Promise<{[language: string]: TokeiResult }> = tokei('./')

app.get("/", (req: Request, res: Response) => {
    res.send(info())
});

app.get("/stats", (req: Request, res: Response) => {
    locStats.then(value => {
        return res.send(value)
    })
});

app.post("/start", (req: Request, res: Response) => {
    res.send(start(req.body))
});

app.post("/move", (req: Request, res: Response) => {
    res.send(move(req.body))
});

app.post("/end", (req: Request, res: Response) => {
    res.send(end(req.body))
});

export let server: Server

async function getMachineLearningData(): Promise<void> {
    if (amUsingMachineData) { // only necessary to get machine learning data if we plan on using it
        const mongoClient: MongoClient = await connectToDatabase() // wait for database connection to be opened up
        const snakeScoresCollection: Collection = await getCollection(mongoClient, "snakeScores") // connects to DB & attempts to get the snakeScores collection

        // there are various different categories we want to have for machine learning
        let aggCursor = snakeScoresCollection.aggregate<SnakeScoreMongoAggregate>(snakeScoreAggregations)

        // each aggr should have an _id object consisting of the grouped elements - snakeLength, snakeCount, depth, startLookahead, & later foodCount & hazardCount
        // it should also have an averageScore

        // consider four different food tiers: 0, 1-3, 4-6, & more
        // consider four different hazard tiers: 0, 1-30, 31-60, & more
        for await (const aggr of aggCursor) {
            evaluationsForMachineLearning[aggr._id.hashKey] = aggr.averageScore
        }

        await mongoClient.close() 
    }
}

export const machineLearningDataResult = getMachineLearningData() // jest needs to know when this is done before beforeAll can return

machineLearningDataResult.then(() => { // once machine learning data is ready, start server
    server = app.listen(port, () => { // Start the Express server
        console.log(`Starting Battlesnake Server at http://0.0.0.0:${port}...`)
        if (amUsingMachineData && Object.keys(evaluationsForMachineLearning).length === 0) {
            console.log(`Wanted to use machine data, but got no data`)
        }
    });
})
